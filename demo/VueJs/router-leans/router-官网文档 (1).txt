
// 开始
// https://router.vuejs.org/zh-cn/essentials/getting-started.html

// vue-router: 将组件 (components) 映射到路由 (routes)，然后告诉 vue-router 在哪里渲染他们


// HTML

<script src="https://unpkg.com/vue/dist/vue.js"></script>
<script src="https://unpkg.com/vue-router/dist/vue-router.js"></script>

<div id="app">
  <h1>Hello App!</h1>
  <p>
    <!-- 使用 router-link 组件来导航. -->
    <!-- 通过传入 `to` 属性指定链接. -->
    <!-- <router-link> 默认会被渲染成一个 `<a>` 标签 -->
    <router-link to="/foo">Go to Foo</router-link>
    <router-link to="/bar">Go to Bar</router-link>
  </p>
  <!-- 路由出口 -->
  <!-- 路由匹配到的组件将渲染在这里 -->
  <router-view></router-view>
</div>

// JavaScript

// 0. 如果使用模块化机制编程，導入Vue和VueRouter，要调用 Vue.use(VueRouter)

// 1. 定义（路由）组件。
// 可以从其他文件 import 进来
const Foo = { template: '<div>foo</div>' }
const Bar = { template: '<div>bar</div>' }

// 2. 定义路由
// 每个路由应该映射一个组件。 其中"component" 可以是
// 通过 Vue.extend() 创建的组件构造器，
// 或者，只是一个组件配置对象。
// 我们晚点再讨论嵌套路由。
const routes = [
  { path: '/foo', component: Foo },
  { path: '/bar', component: Bar }
]

// 3. 创建 router 实例，然后传 `routes` 配置
// 你还可以传别的配置参数, 不过先这么简单着吧。
const router = new VueRouter({
  routes // （缩写）相当于 routes: routes
})

// 4. 创建和挂载根实例。
// 记得要通过 router 配置参数注入路由，
// 从而让整个应用都有路由功能
const app = new Vue({
  router
}).$mount('#app')

// 现在，应用已经启动了！



// 动态路由匹配
// 动态路径参数 (dynamic segment)
// 一个路径参数使用冒号 : 标记，当匹配到一个路由时，
// 参数值会被设置到 this.$route.params，
// 可以在每个组件内使用
// 
// 可以在一个路由设置多段 [路径参数] ,对应的值都会设置到 $route.params 中，例如：
// 
模式 							 匹配路径 				$route.params
/user/:username 				/user/evan 				{ username: 'evan' }
/user/:username/post/:post_id 	/user/evan/post/123 	{ username: 'evan', post_id: 123 }

// $route: $route.params/$route.query/$route.hash
// 路由信息对象
// https://router.vuejs.org/zh-cn/api/route-object.html

// 响应路由参数的变化
// 当使用路由参数时，例如从 /user/foo 导航到 user/bar，原来的组件实例会被复用
// 因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。
// 不过，这也意味着组件的生命周期钩子不会再被调用。

// 复用组件时，想对路由参数的变化作出响应的话，你可以简单地 watch（监测变化） $route 对象：

watch: {
	'$route' (to, from) {
		// 对路由变化做出响应
	}
}

