
// 开始
// https://router.vuejs.org/zh-cn/essentials/getting-started.html

// vue-router: 将组件 (components) 映射到路由 (routes)，然后告诉 vue-router 在哪里渲染他们


// HTML

<script src="https://unpkg.com/vue/dist/vue.js"></script>
<script src="https://unpkg.com/vue-router/dist/vue-router.js"></script>

<div id="app">
  <h1>Hello App!</h1>
  <p>
    <!-- 使用 router-link 组件来导航. -->
    <!-- 通过传入 `to` 属性指定链接. -->
    <!-- <router-link> 默认会被渲染成一个 `<a>` 标签 -->
    <router-link to="/foo">Go to Foo</router-link>
    <router-link to="/bar">Go to Bar</router-link>
  </p>
  <!-- 路由出口 -->
  <!-- 路由匹配到的组件将渲染在这里 -->
  <router-view></router-view>
</div>

// JavaScript

// 0. 如果使用模块化机制编程，導入Vue和VueRouter，要调用 Vue.use(VueRouter)

// 1. 定义（路由）组件。
// 可以从其他文件 import 进来
const Foo = { template: '<div>foo</div>' }
const Bar = { template: '<div>bar</div>' }

// 2. 定义路由
// 每个路由应该映射一个组件。 其中"component" 可以是
// 通过 Vue.extend() 创建的组件构造器，
// 或者，只是一个组件配置对象。
// 我们晚点再讨论嵌套路由。
const routes = [
  { path: '/foo', component: Foo },
  { path: '/bar', component: Bar }
]

// 3. 创建 router 实例，然后传 `routes` 配置
// 你还可以传别的配置参数, 不过先这么简单着吧。
const router = new VueRouter({
  routes // （缩写）相当于 routes: routes
})

// 4. 创建和挂载根实例。
// 记得要通过 router 配置参数注入路由，
// 从而让整个应用都有路由功能
const app = new Vue({
  router
}).$mount('#app')

// 现在，应用已经启动了！





// 动态路由匹配
// 动态路径参数 (dynamic segment)
// 一个路径参数使用冒号 : 标记，当匹配到一个路由时，
// 参数值会被设置到 this.$route.params，
// 可以在每个组件内使用
// 
// 可以在一个路由设置多段 [路径参数] ,对应的值都会设置到 $route.params 中，例如：
// 
模式 							 匹配路径 				$route.params
/user/:username 				/user/evan 				{ username: 'evan' }
/user/:username/post/:post_id 	/user/evan/post/123 	{ username: 'evan', post_id: 123 }

// $route: $route.params/$route.query/$route.hash
// 路由信息对象
// https://router.vuejs.org/zh-cn/api/route-object.html

// 响应路由参数的变化
// 当使用路由参数时，例如从 /user/foo 导航到 user/bar，原来的组件实例会被复用
// 因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。
// 不过，这也意味着组件的生命周期钩子不会再被调用。

// 复用组件时，想对路由参数的变化作出响应的话，你可以简单地 watch（监测变化） $route 对象：

watch: {
	'$route' (to, from) {
		// 对路由变化做出响应
	}
}


// 高级匹配模式
// vue-router 使用 path-to-regexp 作为路径匹配引擎
// https://github.com/pillarjs/path-to-regexp#parameters
// http://forbeslindesay.github.io/express-route-tester/


// 匹配优先级
// 有时候，同一个路径可以匹配多个路由，此时，匹配的优先级就按照路由的定义顺序：谁先定义的，谁的优先级就最高。
// 
// 





// 嵌套路由

// 应用界面 多层嵌套的组件组合
// URL各段动态路径 某种结构对应嵌套的各层组件

/user/foo/profile                     /user/foo/posts
+------------------+                  +-----------------+
| User             |                  | User            |
| +--------------+ |                  | +-------------+ |
| | Profile      | |  +------------>  | | Posts       | |
| |              | |                  | |             | |
| +--------------+ |                  | +-------------+ |
+------------------+                  +-----------------+


// 顶级、没有嵌套
const router = new VueRouter({
  routes: [
    { path: '/user/:id', component: User }
  ]
})


// 有嵌套
// 需要在 VueRouter 的参数中使用 children 配置
const router = new VueRouter({
  routes: [
    { path: '/user/:id', component: User,
      children: [
        {
          // 当 /user/:id/profile 匹配成功，
          // UserProfile 会被渲染在 User 的 <router-view> 中
          path: 'profile',
          component: UserProfile
        },
        {
          // 当 /user/:id/posts 匹配成功
          // UserPosts 会被渲染在 User 的 <router-view> 中
          path: 'posts',
          component: UserPosts
        }
      ]
    }
  ]
})

// 要在嵌套的出口中渲染组件

const User = {
  template: `
    <div class="user">
      <h2>User {{ $route.params.id }}</h2>
      <router-view></router-view>
    </div>
  `
}


// 要注意，以 / 开头的嵌套路径会被当作根路径。 这让你充分的使用嵌套组件而无须设置嵌套的路径。


// children 配置就是像 routes 配置一样的路由配置数组，所以呢，你可以嵌套多层路由。

// 实例：http://jsfiddle.net/yyx990803/L7hscd8h/







// 编程式导航



// 命名路由


// 重定向和别名


// HTML5 History 模式




// 进阶
// 导航钩子


// 路由源信息


// 过渡动效



// 数据获取



// 滚动行为



// 懒加载



// API文档
// router-link
// router-view
// 路由信息对象
// Router 构造配置
// Router 实例
// 对组件注入
