
# Vue-Router

## 初阶
### 开始
https://router.vuejs.org/zh-cn/essentials/getting-started.html

vue-router: 将组件 (components) 映射到路由 (routes)，然后告诉 vue-router 在哪里渲染他们


HTML:

```
<script src="https://unpkg.com/vue/dist/vue.js"></script>
<script src="https://unpkg.com/vue-router/dist/vue-router.js"></script>

<div id="app">
  <h1>Hello App!</h1>
  <p>
    <!-- 使用 router-link 组件来导航. -->
    <!-- 通过传入 `to` 属性指定链接. -->
    <!-- <router-link> 默认会被渲染成一个 `<a>` 标签 -->
    <router-link to="/foo">Go to Foo</router-link>
    <router-link to="/bar">Go to Bar</router-link>
  </p>
  <!-- 路由出口 -->
  <!-- 路由匹配到的组件将渲染在这里 -->
  <router-view></router-view>
</div>
```

JavaScript
```
0. 如果使用模块化机制编程，導入Vue和VueRouter，要调用 Vue.use(VueRouter)

1. 定义（路由）组件。
可以从其他文件 import 进来
const Foo = { template: '<div>foo</div>' }
const Bar = { template: '<div>bar</div>' }

2. 定义路由
每个路由应该映射一个组件。 其中"component" 可以是
通过 Vue.extend() 创建的组件构造器，
或者，只是一个组件配置对象。
我们晚点再讨论嵌套路由。
const routes = [
  { path: '/foo', component: Foo },
  { path: '/bar', component: Bar }
]

// 3. 创建 router 实例，然后传 `routes` 配置
// 你还可以传别的配置参数, 不过先这么简单着吧。
const router = new VueRouter({
  routes // （缩写）相当于 routes: routes
})

// 4. 创建和挂载根实例。
// 记得要通过 router 配置参数注入路由，
// 从而让整个应用都有路由功能
const app = new Vue({
  router
}).$mount('#app')

// 现在，应用已经启动了！
```




### 动态路由匹配
动态路径参数 (dynamic segment)       
一个路径参数使用冒号 : 标记，当匹配到一个路由时，      
参数值会被设置到 this.$route.params，     
可以在每个组件内使用     

可以在一个路由设置多段 [路径参数] ,对应的值都会设置到 $route.params 中，例如：


|模式 							 |匹配路径 				|$route.params
| ------------- | ------------- | ------------- |
|/user/:username 				|/user/evan 				|{ username: 'evan' }
|/user/:username/post/:post_id 	|/user/evan/post/123 	|{ username: 'evan', post_id: 123 }

`$route: $route.params/$route.query/$route.hash`     
[路由信息对象](https://router.vuejs.org/zh-cn/api/route-object.html)


#### 响应路由参数的变化
当使用路由参数时，例如从 /user/foo 导航到 user/bar，原来的组件实例会被复用   
因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。   
不过，这也意味着组件的生命周期钩子不会再被调用。   

复用组件时，想对路由参数的变化作出响应的话，你可以简单地 watch（监测变化） $route 对象：
```
watch: {
	'$route' (to, from) {
		// 对路由变化做出响应
	}
}
```

#### 高级匹配模式  
[vue-router 使用 path-to-regexp 作为路径匹配引擎](https://github.com/pillarjs/path-to-regexp#parameters)       
[例子](http://forbeslindesay.github.io/express-route-tester/)   


// 匹配优先级
// 有时候，同一个路径可以匹配多个路由，此时，匹配的优先级就按照路由的定义顺序：谁先定义的，谁的优先级就最高。
// 
// 





### 嵌套路由

应用界面 多层嵌套的组件组合     
URL各段动态路径 某种结构对应嵌套的各层组件    
```
/user/foo/profile                     /user/foo/posts
+------------------+                  +-----------------+
| User             |                  | User            |
| +--------------+ |                  | +-------------+ |
| | Profile      | |  +------------>  | | Posts       | |
| |              | |                  | |             | |
| +--------------+ |                  | +-------------+ |
+------------------+                  +-----------------+
```

顶级、没有嵌套
```
const router = new VueRouter({
  routes: [
    { path: '/user/:id', component: User }
  ]
})
```

有嵌套
需要在 VueRouter 的参数中使用 children 配置
```
const router = new VueRouter({
  routes: [
    { path: '/user/:id', component: User,
      children: [
        {
          // 当 /user/:id/profile 匹配成功，
          // UserProfile 会被渲染在 User 的 <router-view> 中
          path: 'profile',
          component: UserProfile
        },
        {
          // 当 /user/:id/posts 匹配成功
          // UserPosts 会被渲染在 User 的 <router-view> 中
          path: 'posts',
          component: UserPosts
        }
      ]
    }
  ]
})
```

要在嵌套的出口中渲染组件
```
const User = {
  template: `
    <div class="user">
      <h2>User {{ $route.params.id }}</h2>
      <router-view></router-view>
    </div>
  `
}
```

要注意，以 / 开头的嵌套路径会被当作根路径。 这让你充分的使用嵌套组件而无须设置嵌套的路径。


children 配置就是像 routes 配置一样的路由配置数组，所以呢，你可以嵌套多层路由。    

[实例](http://jsfiddle.net/yyx990803/L7hscd8h/)






### 编程式导航

#### router.push(location)

导航到不同的 URL，则使用 router.push，router.push 向 history 栈添加一个新的记录，当点击后退时，回到之前的 URL

声明式 						编程式
<router-link :to="..."> 	router.push(...)

```
// 字符串
router.push('home')

// 对象
router.push({ path: 'home' })

// 命名的路由
router.push({ name: 'user', params: { userId: 123 }})

// 带查询参数，变成 /register?plan=private
router.push({ path: 'register', query: { plan: 'private' }})

```
该方法的参数可以是一个字符串路径，或者一个描述地址的对象。


#### router.replace(location)

声明式 								编程式
<router-link :to="..." replace> 	router.replace(...)

和 router.push() 相同，但是不会向 history 添加新记录，而是跟它的方法名一样 —— 替换掉当前的 history 记录。


#### router.go(n)

这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 window.history.go(n)。

```

// 在浏览器记录中前进一步，等同于 history.forward()
router.go(1)

// 后退一步记录，等同于 history.back()
router.go(-1)

// 前进 3 步记录
router.go(3)

// 如果 history 记录不够用，那就默默地失败呗
router.go(-100)
router.go(100)


```


#### 操作 History

outer.push/router.replace/router.go 是效仿 window.history API 的  window.history.pushState/window.history.replaceState/window.history.go。

window.history.pushState 也是针对现代浏览器配置 前端路由 的关键方法，另外一个就是 router 默认的 hash 检测方法。

window.history API: 
	[Manipulating the browser history]
	(https://developer.mozilla.org/en-US/docs/Web/API/History_API)
	


### 命名路由

名称标识一个路由，方便链接一个路由、执行一些跳转时候

创建 Router 实例， router 配置中给某个路由设置名称

```
const router = new VueRouter({
  routes: [
    {
      path: '/user/:userId',
      name: 'user',		--- 命名路由
      component: User
    }
  ]
})
```

要链接到一个命名路由，可以给 router-link 的 to 属性传一个对象：

```
<router-link :to="{ name: 'user', params: { userId: 123 }}">User</router-link>
```

这跟代码调用 router.push() 是一回事：

```
router.push({ name: 'user', params: { userId: 123 }})

```

这两种方式都会把路由导航到 /user/123 路径。



### 命名视图

同时（同级）展示多个视图，而不是嵌套展示：

```
<router-view class="view one"></router-view>
<router-view class="view two" name="a"></router-view>
<router-view class="view three" name="b"></router-view>
```
如果 router-view 没有设置名字，那么默认为 default

一个视图 一个组件 渲染，同个路由，多个视图需要多个组件。
确保正确使用 components 配置 (components 是复数的)

```
const router = new VueRouter({
  routes: [
    {
      path: '/',
      components: {
        default: Foo,
        a: Bar,
        b: Baz
      }
    }
  ]
})

```


### 重定向和别名

#### 重定向：redirect

```

const router = new VueRouter({
  routes: [
    { path: '/a', redirect: '/b' }
  ]
})

```

重定向的目标也可以是一个命名的路由：

```
const router = new VueRouter({
  routes: [
    { path: '/a', redirect: { name: 'foo' }}
  ]
})
```

甚至是一个方法，动态返回重定向目标：

```
const router = new VueRouter({
  routes: [
    { path: '/a', redirect: to => {
      // 方法接收 目标路由 作为参数
      // return 重定向的 字符串路径/路径对象
    }}
  ]
})
```
[更高级用法](https://github.com/vuejs/vue-router/blob/next/examples/redirect/app.js)

#### 别名：alias

/a 的别名是 /b，意味着，当用户访问 /b 时，URL 会保持为 /b，但是路由匹配则为 /a，就像用户访问 /a 一样。

上面对应的路由配置为：

```
const router = new VueRouter({
  routes: [
    { path: '/a', component: A, alias: '/b' }
  ]
})
```

『别名』的功能让你可以自由地将 UI 结构映射到任意的 URL，而不是受限于配置的嵌套路由结构。[更高级用法](https://github.com/vuejs/vue-router/blob/next/examples/route-alias/app.js)



### HTML5 History 模式
vue-router 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。

如果不想要很丑的 hash，我们可以用路由的 history 模式，这种模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面。

```
const router = new VueRouter({
  mode: 'history',
  routes: [...]
})
```
当你使用 history 模式时，URL 就像正常的 url，例如 http://yoursite.com/user/id，也好看！

不过这种模式要玩好，还需要后台配置支持。因为我们的应用是个单页客户端应用，如果后台没有正确的配置，当用户在浏览器直接访问 http://oursite.com/user/id 就会返回 404，这就不好看了。

所以呢，你要在服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 index.html 页面，这个页面就是你 app 依赖的页面。

#### 后端配置例子
Apache

```
<IfModule mod_rewrite.c>
  RewriteEngine On
  RewriteBase /
  RewriteRule ^index\.html$ - [L]
  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteCond %{REQUEST_FILENAME} !-d
  RewriteRule . /index.html [L]
</IfModule>
```

nginx

```
location / {
  try_files $uri $uri/ /index.html;
}
```

[Node.js (Express)](https://github.com/bripkens/connect-history-api-fallback)



#### 警告
给个警告，因为这么做以后，你的服务器就不再返回 404 错误页面，因为对于所有路径都会返回 index.html 文件。为了避免这种情况，你应该在 Vue 应用里面覆盖所有的路由情况，然后在给出一个 404 页面。

```
const router = new VueRouter({
  mode: 'history',
  routes: [
    { path: '*', component: NotFoundComponent }
  ]
})
```

或者，如果你是用 Node.js 作后台，可以使用服务端的路由来匹配 URL，当没有匹配到路由的时候返回 404，从而实现 fallback。




## 进阶
### 导航钩子
[导航] 表示路由正在发生变化 -- 我的理解是 路由导向


>
原话：    
vue-router 提供的导航钩子主要用来拦截导航，让它完成跳转或取消。   
有多种方式可以在路由导航发生时执行钩子：全局的, 单个路由独享的, 或者组件级的。
>

vue-router 提供的导航钩子主要用来设置路由导向，跳转或是取消


#### 全局钩子
注册全局 before 钩子:
```
const router = new VuwRouter ({})
router.beforeEach (to, from, next) ==> {
	// ...
}
```

当一个路由导向触发，全局的 before 钩子按照创建顺序调用。
钩子是异步解析执行，此时导航在所有钩子 resolve 完之前一直处于 等待中。

每个钩子接受 3 个参数：
 to: Route: 即将要进入的目标 路由对象 --- 进入 link

 from: Route: 当前导航正要离开的路由 --- 离开 link
 
 next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。
 	next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed （确认的）。

    next(false): 中断当前的导航。如果浏览器的 URL 改变了（可能是用户手动或者浏览器后退按钮），那么 URL 地址会重置到 from 路由对应的地址。

    next('/') 或者 next({ path: '/' }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。

next 必挑，不然不会被 resolve，不会发生路由变化

#### 某个路由独享的钩子
路由配置上直接定义钩子，参数与全局钩子的方法参数一样：

```
const router = new VueRouter({
  routes: [
    {
      path: '/foo',
      component: Foo,
      beforeEnter: (to, from, next) => {
        // ...
      }
    }
  ]
})

```


#### 组件内的钩子

```
const Foo = {
  template: `...`,
  beforeRouteEnter (to, from, next) {
    // 在渲染该组件的对应路由被 confirm 前调用
    // 不！能！获取组件实例 `this`
    // 因为当钩子执行前，组件实例还没被创建
  },
  beforeRouteUpdate (to, from, next) {
    // 在当前路由改变，但是该组件被复用时调用
    // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，
    // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。
    // 可以访问组件实例 `this`
  },
  beforeRouteLeave (to, from, next) {
    // 导航离开该组件的对应路由时调用
    // 可以访问组件实例 `this`
  }
}    
```


路由组件内直接定义
    beforeRouteEnter -- 不能访问 this，路由导向确认前，钩子被调用，但是组件还没被创建

    可以通过传一个回调给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。
    ```
	beforeRouteEnter (to, from, next) {
	  next(vm => {
	    // 通过 `vm` 访问组件实例
	  })
	}
	```

    beforeRouteUpdate (2.2 新增)
    beforeRouteLeave 
    可以 在 beforeRouteLeave 中直接访问 this。这个 leave 钩子通常用来禁止用户在还未保存修改前突然离开。可以通过 next(false) 来取消导向。




### 路由元信息

```
const router = new VueRouter({
  routes: [
    {
      path: '/foo',
      component: Foo,
      children: [
        {
          path: 'bar',
          component: Bar,
          // a meta field
          meta: { requiresAuth: true }
        }
      ]
    }
  ]
})
```

路由定义、meta 字段配置

routes 配置中的每个路由对象为 路由记录

路由记录可以是嵌套的，因此，当一个路由匹配成功后，他可能匹配多个路由记录

一个路由匹配到的所有路由记录会暴露为 $route 对象（还有在导航钩子中的 route 对象）的 $route.matched 数组。因此，我们需要遍历 $route.matched 来检查路由记录中的 meta 字段。

该路由匹配实在 浏览器上 执行，而浏览器上执行可以 被用户查看，利用 meta 字段可以有效隐藏 路由匹配 导致的信息泄露。

下面例子展示在全局导航钩子中检查 meta 字段：
```
router.beforeEach((to, from, next) => {
  if (to.matched.some(record => record.meta.requiresAuth)) {
    // this route requires auth, check if logged in
    // if not, redirect to login page.
    if (!auth.loggedIn()) {
      next({
        path: '/login',
        query: { redirect: to.fullPath }
      })
    } else {
      next()
    }
  } else {
    next() // 确保一定要调用 next()
  }
})
```


## 过渡动效

统一过渡动效
<router-view> 是基本的动态组件，所以我们可以用 <transition> 组件给它添加一些过渡效果：

```
<transition>
  <router-view></router-view>
</transition>

```

更多动效：https://vuejs.org/v2/guide/transitions.html


### 单个路由的过渡
每个路由组件有各自的过渡效果，可以在各路由组件内使用 <transition> 并设置不同的 name。

```
const Foo = {
  template: `
    <transition name="slide">
      <div class="foo">...</div>
    </transition>
  `
}

const Bar = {
  template: `
    <transition name="fade">
      <div class="bar">...</div>
    </transition>
  `
}
```


### 基于路由的动态过渡
还可以基于当前路由与目标路由的变化关系，动态设置过渡效果：
```
<!-- 使用动态的 transition name -->
<transition :name="transitionName">
  <router-view></router-view>
</transition>

// 接着在父组件内
// watch $route 决定使用哪种过渡
watch: {
  '$route' (to, from) {
    const toDepth = to.path.split('/').length
    const fromDepth = from.path.split('/').length
    this.transitionName = toDepth < fromDepth ? 'slide-right' : 'slide-left'
  }
}
```


## 数据获取
### 导航完成之后获取
执行过程：先完成导航，然后在接下来的组件生命周期钩子中获取数据。在数据获取期间显示『加载中』之类的指示。

马上导航和渲染组件，在组件的 created 钩子中获取数据
数据获取期间 loading 状态展示，还可以在不同的视图展示不同的 loading 状态

假设我们有一个 Post 组件，需要基于 $route.params.id 获取文章数据：
```
<template>
  <div class="post">
    <div class="loading" v-if="loading">
      Loading...
    </div>

    <div v-if="error" class="error">
      {{ error }}
    </div>

    <div v-if="post" class="content">
      <h2>{{ post.title }}</h2>
      <p>{{ post.body }}</p>
    </div>
  </div>
</template>

export default {
  data () {
    return {
      loading: false,
      post: null,
      error: null
    }
  },
  created () {
    // 组件创建完后获取数据，
    // 此时 data 已经被 observed 了
    this.fetchData()
  },
  watch: {
    // 如果路由有变化，会再次执行该方法
    '$route': 'fetchData'
  },
  methods: {
    fetchData () {
      this.error = this.post = null
      this.loading = true
      // replace getPost with your data fetching util / API wrapper
      getPost(this.$route.params.id, (err, post) => {
        this.loading = false
        if (err) {
          this.error = err.toString()
        } else {
          this.post = post
        }
      })
    }
  }
}
```

### 导航完成之前获取
执行过程：导航完成前，在路由的 enter 钩子中获取数据，在数据获取成功后执行导航。

转入新的路由前获取数据
组件的 beforeRouteEnter 钩子中获取数据，当数据获取成功后只调用 next 方法
```
export default {
  data () {
    return {
      post: null,
      error: null
    }
  },
  beforeRouteEnter (to, from, next) {
    getPost(to.params.id, (err, post) => {
      if (err) {
        // display some global error message
        next(false)
      } else {
        next(vm => {
          vm.post = post
        })
      }
    })
  },
  // 路由改变前，组件就已经渲染完了
  // 逻辑稍稍不同
  watch: {
    $route () {
      this.post = null
      getPost(this.$route.params.id, (err, post) => {
        if (err) {
          this.error = err.toString()
        } else {
          this.post = post
        }
      })
    }
  }
}
```
在为后面的视图获取数据时，用户会停留在当前的界面，因此建议在数据获取期间，显示一些进度条或者别的指示。如果数据获取失败，同样有必要展示一些全局的错误提醒。


## 滚动行为
前端路由，切换新路由，想要页面滚到顶部，或是保持原先的滚动位置，就像重新加载页面。
vue-router 能做前端路由事，还可以自定义路由切换时页面如何滚动
注意: 这个功能只在 HTML5 history 模式下可用。

Router实例，添加 scrollBehavior 方法：

```
scrollBehavior (to, from, savedPosition) {
// return 期望滚动到哪个的位置
}
```

接收 to 和 from 路由对象。第三个参数 savedPosition 当且仅当 popstate 导航 (通过浏览器的 前进/后退 按钮触发) 时才可用。

这个方法返回滚动位置的对象信息，长这样：

    { x: number, y: number }
    { selector: string } 

如果返回一个布尔假的值，或者是一个空对象，那么不会发生滚动。
```
对于所有路由导航，简单地让页面滚动到顶部:
scrollBehavior (to, from, savedPosition) {
  return { x: 0, y: 0 }
}
```

返回 savedPosition，在按下 后退/前进 按钮时，就会像浏览器的原生表现那样：

```
scrollBehavior (to, from, savedPosition) {
  if (savedPosition) {
    return savedPosition
  } else {
    return { x: 0, y: 0 }
  }
}
```

如果你要模拟『滚动到锚点』的行为：

```
scrollBehavior (to, from, savedPosition) {
  if (to.hash) {
    return {
      selector: to.hash
    }
  }
}
```

我们还可以利用 路由元信息 更细颗粒度地控制滚动。


## 懒加载
### 背景：JavaScript 包过大，影响页面加载
### 思想：把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了。

结合 Vue 的 异步组件 和 Webpack 的 code splitting feature, 轻松实现路由组件的懒加载。

异步组件：http://vuejs.org/guide/components.html#Async-Components
Webpack 的 code splitting feature：https://doc.webpack-china.org/guides/code-splitting-async/#require-ensure-/

首先，可以将异步组件定义为返回一个 Promise 的工厂函数(该函数返回的Promise应该 resolve 组件本身):

```
const Foo = () => Promise.resolve({ /*  组件定义对象 */ })
```

第二,在 webpack 2中,我们可以使用动态 import语法来定义代码分块点(split point):
动态 import语法: https://github.com/tc39/proposal-dynamic-import

```
import('./Foo.vue') // returns a Promise
```

注意:如果您使用的是 babel,你将需要添加 syntax-dynamic-import 插件,才能使 babel 可以正确地解析语法
syntax-dynamic-import：http://babeljs.io/docs/plugins/syntax-dynamic-import/

结合这两者，这就是如何定义一个能够被 webpack自动代码分割的异步组件

```
const Foo = () => import('./Foo.vue')
```

在路由配置中什么都不需要改变，只需要像往常一样使用 Foo:

```
const router = new VueRouter({
  routes: [
    { path: '/foo', component: Foo }
  ]
})
```

### 把组件按组分块
有时候我们想把某个路由下的所有组件都打包在同个异步块(chunk)中。只需要使用 命名 chunk,一个特殊的注释语法来提供chunk name(需要webpack > 2.4)

```
const Foo = () => import(/* webpackChunkName: "group-foo" */ './Foo.vue')
const Bar = () => import(/* webpackChunkName: "group-foo" */ './Bar.vue')
const Baz = () => import(/* webpackChunkName: "group-foo" */ './Baz.vue')
```

webpack 会将任何一个异步模块与相同的块名称组合到相同的异步块中。

// API文档
// router-link
// router-view
// 路由信息对象
// Router 构造配置
// Router 实例
// 对组件注入
